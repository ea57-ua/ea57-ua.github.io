{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Apuntes sobre Java","text":""},{"location":"index.html#indice","title":"Indice","text":"<ul> <li>Excepciones</li> </ul>"},{"location":"java/excepciones.html","title":"Excepciones","text":""},{"location":"java/excepciones.html#autor-erik-avagyan","title":"Autor: Erik Avagyan","text":""},{"location":"java/excepciones.html#contenido","title":"Contenido","text":"<ul> <li>Que es una excepcion?</li> <li>Jerarqu\u00eda de excepciones</li> <li>Tipos de excepciones<ul> <li>Excepciones comprobadas o checked exceptions</li> <li>Excepciones no comprobadas o unchecked exceptions o <code>Runtime exceptions</code></li> </ul> </li> <li>Manejo de excepciones<ul> <li>Bloque try-catch</li> <li>Lanazamiento de excepciones</li> </ul> </li> <li>Excepciones definidas por el usuario</li> </ul>"},{"location":"java/excepciones.html#que-es-una-excepcion","title":"Que es una excepcion?","text":"<p>Una excepci\u00f3n en Java es un evento inesperado que puede interrumpir el flujo de la ejecuci\u00f3n. Se usan las excepciones para manejar errores y otros eventos que pueden ocurrir durante la ejecuci\u00f3n de un programa.</p>"},{"location":"java/excepciones.html#jerarquia-de-excepciones","title":"Jerarqu\u00eda de excepciones","text":"<p>La clase base de todas las excepciones es la clase Throwable. Esta clase tiene dos subclases directas: Error y Exception. La clase Error representa errores que no se pueden recuperar, como por ejemplo un error de memoria. La clase Exception representa errores que se pueden recuperar, como por ejemplo un error de divisi\u00f3n por cero. La clase Exception tiene varias subclases, que representan diferentes tipos de excepciones. Por ejemplo, la clase ArithmeticException representa una excepci\u00f3n de divisi\u00f3n por cero.</p>"},{"location":"java/excepciones.html#tipos-de-excepciones","title":"Tipos de excepciones","text":"<p>Las excepciones se dividen en dos tipos:</p>"},{"location":"java/excepciones.html#excepciones-comprobadas-o-checked-exceptions","title":"Excepciones comprobadas o checked exceptions","text":"<p>Excepci\u00f3n que ocurre en tiempo de compilaci\u00f3n. El compilador obliga a que se capture o se lance la excepci\u00f3n. </p> <p>Ejemplos:  - FileNotFoundException - IOException - SQLException</p>"},{"location":"java/excepciones.html#excepciones-no-comprobadas-o-unchecked-exceptions-o-runtime-exceptions","title":"Excepciones no comprobadas o unchecked exceptions o <code>Runtime exceptions</code>","text":"<p>Excepci\u00f3n que ocurre en tiempo de ejecuci\u00f3n. El compilador no obliga a que se capture o se lance la excepci\u00f3n.</p> <p>Ejemplos: - NullPointerException - ArrayIndexOutOfBoundsException - ArithmeticException</p> <p></p>"},{"location":"java/excepciones.html#manejo-de-excepciones","title":"Manejo de excepciones","text":""},{"location":"java/excepciones.html#bloque-try-catch","title":"Bloque try-catch","text":"<p>La estructura <code>try-catch</code> se usa para manejar excepciones. En <code>try</code> se coloca el c\u00f3digo que puede lanzar una excepci\u00f3n. En <code>catch</code> se coloca el c\u00f3digo que se ejecuta cuando se lanza una excepci\u00f3n.</p> <pre><code>    try {\n        // C\u00f3digo que puede generar una excepci\u00f3n\n    } catch (ExcepcionTipo1 e) {\n        // Manejar la excepci\u00f3n de tipo 1\n    } catch (ExcepcionTipo2 e) {\n        // Manejar la excepci\u00f3n de tipo 2\n    }\n</code></pre> <p>En el c\u00f3digo de catch podemos hacer diferentes cosas: -  Imprimir un mensaje de error -  Relanzar la excepci\u00f3n -  Lanzar una nueva excepci\u00f3n -  Hacer alguna acci\u00f3n, depende del contexto</p> <p>En Java tambi\u00e9n existe el bloque <code>try-catch-finally</code>. El bloque <code>finally</code> se ejecuta siempre, independientemente de si se lanza una excepci\u00f3n o no.</p> <pre><code>    try {\n        // C\u00f3digo que puede generar una excepci\u00f3n\n    } catch (ExcepcionTipo1 e) {\n        // Manejar la excepci\u00f3n de tipo 1\n    } catch (ExcepcionTipo2 e) {\n        // Manejar la excepci\u00f3n de tipo 2\n    } finally {\n        // C\u00f3digo que se ejecuta siempre\n    }\n</code></pre>"},{"location":"java/excepciones.html#lanazamiento-de-excepciones","title":"Lanazamiento de excepciones","text":"<p>Para lanzar una excepci\u00f3n se usa la palabra clave <code>throw</code>. Se puede lanzar una excepci\u00f3n de cualquier tipo, pero es recomendable lanzar una excepci\u00f3n de un tipo existente.</p> <pre><code>    throw new ExcepcionTipo1();\n</code></pre> <p>Podemos hacer que el m\u00e9todo actual lance una excepci\u00f3n usando la palabra clave <code>throws</code>. En este caso, el m\u00e9todo actual no maneja la excepci\u00f3n, sino que la lanza al m\u00e9todo que lo llam\u00f3.</p> <pre><code>    public void metodo1() throws ExcepcionTipo1 {\n        // C\u00f3digo que puede generar una excepci\u00f3n\n    }\n</code></pre>"},{"location":"java/excepciones.html#excepciones-definidas-por-el-usuario","title":"Excepciones definidas por el usuario","text":"<p>Se pueden definir excepciones personalizadas. Para esto, se debe crear una clase que herede de la clase <code>Exception</code> o de la clase <code>RuntimeException</code>. La clase <code>Exception</code> se usa para crear excepciones comprobadas, mientras que la clase <code>RuntimeException</code> se usa para crear excepciones no comprobadas.</p> <pre><code>    public class MiExcepcion extends Exception {\n        // C\u00f3digo de la clase\n    }\n</code></pre> <pre><code>    public class MiExcepcion extends RuntimeException {\n        // C\u00f3digo de la clase\n    }\n</code></pre> <p>Crear nuestras excepciones ayuda a clasificar mejor los errores de la aplicaci\u00f3n. Se a\u00f1aden mensajes significativos que ayudan durante el proceso de desarrollo. Cuanto m\u00e1s especifica una excepci\u00f3n el control de los errores es m\u00e1s granular. </p> <p>Contructores de excepciones personalizadas: <pre><code>public class MiExcepcionPersonalizada extends Exception {\n    public MiExcepcionPersonalizada() {\n        super(\"Ocurri\u00f3 un error personalizado.\");\n    }\n\n    public MiExcepcionPersonalizada(String mensaje) {\n        super(mensaje);\n    }\n}\n</code></pre></p> <p>Otro ejemplo: <pre><code>public class MiExcepcionConAtributo extends Exception {\n    // Atributo personalizado\n    private int codigoError;\n\n    // Constructor que acepta un c\u00f3digo de error\n    public MiExcepcionConAtributo(int codigoError) {\n        this.codigoError = codigoError;\n    }\n\n    // Sobrescribe el m\u00e9todo getMessage() para incluir el c\u00f3digo de error en el mensaje\n    @Override\n    public String getMessage() {\n        return \"MiExcepcionConAtributo: C\u00f3digo de error \" + codigoError;\n    }\n}\n</code></pre></p> <p>Como se usa: <pre><code>public class Ejemplo {\n    public static void main(String[] args) {\n        try {\n            throw new MiExcepcionConAtributo(404);\n        } catch (MiExcepcionConAtributo e) {\n            System.out.println(e.getMessage()); \n            // Imprime: \"MiExcepcionConAtributo: C\u00f3digo de error 404\"\n        }\n    }\n}\n</code></pre></p>"}]}